#Developed by James Booth M68153 for Microchip Technology 2022 #
#Github repo: https://github.com/jboothMCHP/OEE_DASHBOARD.git #
#The purpose of this architecture is to provide a complete solution for data extraction, wrangling and archiving data into MCHP SQL Servers via an ETL pipeline #
#ETL order is given at the top of the code beinging with 'PL' and increasing sequentially #
#Information is displayed via the 'OEE Dashboard' a Django based web app which pulls data from a csv file which generates up to date graphs via the plotly chart studio API #
#OEE Dashboard can be viewed at http://http://10.205.40.60/ #
#Historic information can be viewed in SSRS report at http://reporting.ax2012.microchip.com/reports/ #
#For scalability purposes code is duplicated for new machines (e.g., 'DA5','DA6' etc)#
#Program launch via cmd terminal: cd C:\vs_code\OEE_DASHBOARD\PYTHONDATA | python DA5_watcherWrapper.py #
#Server launch using port 80 (must be enabled on host PC): cd C:\vs_code\OEE_DASHBOARD\PYTHONDATA | python manage.py runserver 0.0.0.0:80 #
#Data is generated by the BESI Datacon Evos daily. Machine statistics export mode = Daily, Hour = 8, Delete machine statistics after export = On#
#The above means that data is recorded a the machine level daily and restarts its log on the 8th hour of everyday i.e. 8AM. #
#Therefore the data gathered on day 2 represents the OEE performance of day 1# 

##############################################################################################################################################################################

#The purpose of this program is to detect if a feature exists within the .ram file and if so delete it from the text file #
#Datacon programs have a feature called basic machine calibration which is recorded in the file as 'bmc' # 
#The SOP guidances states that calibration must be done when each program is changed, however as it is user input it often does not happen. This caused the program to crash #
#bmc values are always 0 (as no components are being picked up and placed) # 
#Because the presence of the bmc row is not know this program was created to 'clean' the data prior to extracting and processing values for OEE #
#The program reads the .ram text file as a fixed width file, however the colspecs are set so that it consideres all data as a single column # 
#The data is converted to a pandas dataframe # 
#The ignore valriable is defined as a list of values that we want to drop from the text file #
#Using the pandas isin function we itterate over the rows of the file and drop them from our dataframe #
#The .ram file is then saved to a new folder location for processing #



import pandas as pd
import os.path



def run_Data_Clean(path):
    print(f'Running Data_Clean on {path}')


    basename = os.path.basename(path) 
    print(f'basename: {basename}') 

    rawData = pd.read_fwf(path, colspecs=[(0,142)], names=['Col_1'],)

    df = pd.DataFrame(rawData)


    ignore = ['bmc', 'bmc       0          0          0          0          0          0          0          0          0          0          0']
    df = df[df.Col_1.isin(ignore) == False]

    print(f'df new = {df}')


    df.to_csv(f'P:\\OEE_Dashboard\\DA5\\Cleaned_Data_Output\\{basename}', index=False, mode='a', header=False)
    
